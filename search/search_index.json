{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e1ctica 3.2 - Despliegue con Node Express y con Netlify Despliegue con Node Express En primer lugar debemos asegurarnos de que Tomcat no est\u00e1 ejecut\u00e1ndose: sudo systemctl status tomcat9 # Comprobar el estado de Tomcat sudo systemctl stop tomcat9 # Parar Tomcat A continuaci\u00f3n instalamos Node.js y el gestor de paquetes npm: sudo apt install nodejs npm Para realizar el despliegue, clonamos un repositorio de GitHub que contenga una aplicaci\u00f3n Node. Nos colocamos dentro del directorio del proyecto e instalamos los paquetes requeridos ejecutando: npm install Tambi\u00e9n es importante comprobar en el c\u00f3digo fuente de la aplicaci\u00f3n el puerto que utilizar\u00e1 para comunicarse. En mi caso es el puerto 3000, por lo que ejecuto: sudo ufw allow 3000/tcp Si tratamos de desplegar la aplicaci\u00f3n, aparecer\u00e1 el mensaje de error \"nodemon: not found\". Para solventar este problema, agregamos dicho paquete al archivo package.json ejecutando: npm install nodemon --save-dev Y ahora podremos desplegar la aplicaci\u00f3n correctamente con: npm run start Y podremos acceder a ella desde el navegador de nuestra m\u00e1quina anfitriona indicando la IP de nuestra m\u00e1quina virtual y el puerto en el que se aloja la aplicaci\u00f3n (en mi caso, el 3000): Cuestiones sobre Node Express \u00bfD\u00f3nde podemos ver qu\u00e9 script se est\u00e1 ejecutando (al realizar 'npm run start')? Al realizar 'npm run start' sobre el directorio ra\u00edz de nuestra aplicaci\u00f3n estamos ejecutando un script que viene especificado en el archivo 'package.json'. Concretamente, dentro de este archivo existir\u00e1 un bloque 'scripts' que indica qu\u00e9 debe ejecutarse al realizar el comando 'npm run start'. En este ejemplo: \u00bfQu\u00e9 comando se est\u00e1 ejecutando? En este caso, el bloque 'scripts' del 'package.json' indica que debe ejecutarse el comando 'nodemon src/index.js' cuando tratemos de realizar 'npm run start'. Despliegue con Netlify En primer lugar, preparamos una aplicaci\u00f3n simple consistente de dos archivos HTML y un JS e inicializamos el proyecto con: npm init Y podemos comprobar en local que funciona correctamente con: node aplicacion.js Y accediendo desde el navegador a la IP y puerto de la aplicaci\u00f3n (debemos asegurarnos de que Tomcat u otras aplicaciones no est\u00e1n utilizando ya ese puerto): Alternativamente, tambi\u00e9n podemos comprobarlo con curl: curl 192.168.0.20:8080 Para poder desplegar sin problemas la aplicaci\u00f3n, debemos modificar el archivo 'package.json'. En concreto, hay que modificar el bloque 'scripts' dentro de este archivo para que quede de la siguiente manera: \"scripts\": { \"start\":\"node aplicacion.js\" } Teniendo en cuenta todas estas cuestiones, borramos esta aplicaci\u00f3n simple y clonamos un repositorio de GitHub que contiene una aplicaci\u00f3n de ejemplo que s\u00ed desplegaremos con Netlify. Utilizaremos dos m\u00e9todos para desplegar aplicaciones con Netlify: el despliegue manual desde el CLI (Command Line Interface) y el despliegue desde el c\u00f3digo publicado en GitHub. Antes de empezar con el despliegue, es necesario registrarse en Netlify. En mi caso, me registro con mi cuenta de correo, para que no se enlace mi cuenta de GitHub directamente. Netlify env\u00eda un email de confirmaci\u00f3n, que nos reenv\u00eda a su p\u00e1gina donde debemos responder a una serie de preguntas sobre nosotros (nombre, si pertenecemos a alguna instituci\u00f3n o empresa, etc) donde lo \u00fanico relevante es que he saltado el paso de enlace con GitHub, que realizar\u00e9 m\u00e1s adelante. A continuaci\u00f3n, pasamos a los procesos del despliegue en s\u00ed. Despliegue mediante Interfaz de L\u00ednea de Comandos En primer lugar, ser\u00e1 necesario generar un token de acceso personal para que podamos establecer una conexi\u00f3n segura con Netlify. Para ello, desde la p\u00e1gina web, accedemos a las 'users settings' y clicamos en 'Applications'. Desde ah\u00ed podremos seleccionar 'New access token' y se generar\u00e1 un nuevo token, que es una cadena de texto que debemos copiar y guardar. Volviendo al terminal (conectado por SSH a nuestro servidor), debemos definir una variable de entorno que contenga el token generado por Netlify: export NETLIFY_AUTH_TOKEN={token_generado_por_netlify} Ahora ya podemos instalar el CLI de Netlify: sudo npm install netlify-cli -g Y si tratamos de ejecutar 'netlify login', nos dir\u00e1 que ya estamos loggeados porque ya se ha comprobado el contenido de la variable de entorno 'NETLIFY_AUTH_TOKEN'. Este es el momento de instalar las dependencias de la aplicaci\u00f3n, buildearla y desplegarla. Nos colocamos dentro del directorio de la aplicaci\u00f3n y ejecutamos: sudo npm install sudo npm run build netlify deploy Le indicamos que queremos crear un nuevo sitio y respondemos las preguntas que nos netlify nos plantea. En mi caso: Esa es la fase de \"pre-deploy\". Para llevar la aplicaci\u00f3n al despliegue definitivo, ejecutamos: netlify deploy --prod Y le indicamos el directorio con el contenido a desplegar. En mi caso, './build' desde el directorio de la aplicaci\u00f3n. Para comprobar que el despliegue ha resultado exitoso, accedo a la URL que indica Netlify: Despliegue mediante conexi\u00f3n con GitHub Para realizar el despliegue mediante una conexi\u00f3n entre Netlify y GitHub, en primer lugar, eliminamos desde la p\u00e1gina de Netlify la p\u00e1gina desplegada anteriormente (accedemos a la configuraci\u00f3n del site y bajamos hasta encontrar la opci\u00f3n 'delete site') y en nuestra MV, eliminamos el directorio con el contenido de la aplicaci\u00f3n. Para simular un proyecto que hemos desarrollado desde cero y del que, en principio, s\u00f3lo disponemos el c\u00f3digo fuente en local, descargaremos el c\u00f3digo fuente de la misma aplicaci\u00f3n que usamos en el despliegue anterior en un archivo zip desde GitHub, crearemos un repositorio vac\u00edo y subiremos el c\u00f3digo fuente de la aplicaci\u00f3n. Para ello, ejecutamos: # Comandos para bajar el c\u00f3digo fuente: mkdir practica3-4 # Creamos directorio para almacenar el c\u00f3digo. wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip # Descargamos el c\u00f3digo fuente de la aplicaci\u00f3n. unzip main.zip -d practica3-4 # Descomprimimos el archivo con el c\u00f3digo fuente en el directorio creado anteriormente. cd practica3-4/color-shades-generator-main/ # Nos colocamos en el directorio que contiene el c\u00f3digo fuente. En este momento es conveniente tener creado el repositorio vac\u00edo en GitHub. Para ello, accedemos a la p\u00e1gina y buscamos el bot\u00f3n de \"Nuevo repositorio\". En mi caso, mi repositorio remoto se llama 'practica3-4'. Adem\u00e1s, es conveniente que creemos un par de claves p\u00fablica-privada mediante SSH para comunicar nuestra MV con GitHub. Para ello: ssh-keygen -t ed25519 -C \"a23pebeal@iesgrancapitan.org\" # Donde -t es una bandera que especif\u00edca el algoritmo utilizado para generar las claves. # Donde -C es un comentario que a\u00f1adimos a la clave, yo he utilizado el correo electr\u00f3nico que tengo asociado a mi cuenta de Github, como indica su gu\u00eda para generar claves SSH. A continuaci\u00f3n, el comando nos presenta unas preguntas que dejaremos en blanco, de manera que las claves se almacenar\u00e1n en el directorio por defecto '~/.ssh/' y no ser\u00e1 necesario indicar ninguna frase de seguridad para acceder a las claves. Por \u00faltimo, a\u00f1adimos la clave privada generada al manejador de claves: ssh-add ~/.ssh/id_ed25519 Moment\u00e1neamente dejamos el terminal, accedemos a nuestra cuenta de GitHub desde el navegador, nos dirigimos a 'Settings/SSH and GPG keys/' y pulsamos 'Nueva clave SSH'. Debemos copiar y pegar el contenido de '~/.ssh/id_ed25519.pub' (que es nuestra clave p\u00fablica) y subirlo dos veces, una como 'Authentication key' y otra como 'Signing key'. Una vez creado el repositorio y configuradas las claves SSH, volvemos al terminal (que, recordamos, est\u00e1 conectado por SSH a la MV) y ejecutamos los siguientes comandos para inicializar el repositorio local y relacionarlo con el repositorio remoto: # Comandos de git para crear el nuevo repositorio: git init # Inicializamos el repositorio git branch -M main # Indicamos que la rama principal ser\u00e1 \"main\" git remote add origin {direcci\u00f3n SSH del repositorio remoto} # Indicamos la direcci\u00f3n SSH del repositorio remoto al que subiremos el c\u00f3digo fuente de la aplicaci\u00f3n. git add . # A\u00f1adimos el c\u00f3digo fuente al 'stage' de git. git commit -m \"Subida del c\u00f3digo fuente.\" # 'Comprometemos' los archivos en el \u00e1rea de 'stage' y le a\u00f1adimos un comentario descriptivo. git push --set-upstream origin main # Subimos el c\u00f3digo al repositorio remoto, creando en \u00e9l la rama 'main', que existe en local pero no a\u00fan en remoto. Este es el aspecto que tendr\u00e1 ahora nuestro repositorio remoto en GitHub: Con el c\u00f3digo subido al repositorio remoto, ya s\u00f3lo queda enlazar nuestra cuenta de GitHub con Netlify. Para ello, volvemos al navegador y entramos a Netlify y seleccionamos \"Import from Git\" e indicamos GitHub como nuestro proveedor. Nos saltar\u00e1 una ventana emergente de GitHub pregunt\u00e1ndonos si queremos ceder a Netlify permisos para consultar informaci\u00f3n de nuestra cuenta y realizar determinadas acciones: Confirmamos la autorizaci\u00f3n y se nos llevar\u00e1 a otra p\u00e1gina (en la misma ventana) pregunt\u00e1ndonos esta vez d\u00f3nde queremos \"instalar Netlify\". Se nos presentar\u00e1 una lista de las organizaciones que tenemos asociadas en GitHub, encabezada por nuestro usuario: Seleccionamos nuestro usuario y se nos presentar\u00e1 la opci\u00f3n de instalar Netlify en todos nuestros repositorios o en s\u00f3lo una selecci\u00f3n de estos. En este caso, indicaremos s\u00f3lo el repositorio 'practica3-4' y procedemos a la instalaci\u00f3n de Netlify: Ahora se cerrar\u00e1 la ventana emergente y volvemos a la ventana original de Netlify en la que est\u00e1bamos originalmente realizando el enlace a GitHub. Podemos ver que ahora nos aparece el repositorio que hemos seleccionado para que se instale Netlify: Lo seleccionamos y llegaremos a la p\u00e1gina de deploy, que nos ofrece una serie de opciones para el despliegue. En principio, s\u00f3lo es necesario indicar el nombre del 'site' (es conveniente comprobar la disponibilidad antes de intentar desplegarlo) y podemos dejar el resto de opciones que aparecen predeterminadas: Netlify tardar\u00e1 un poco en realizar el despliegue. Cuando haya terminado, saltar\u00e1 un mensaje de la p\u00e1gina notific\u00e1ndonos que ha finalizado y podremos acceder a la aplicaci\u00f3n desplegada: Ahora, todos los cambios que realicemos sobre el c\u00f3digo y que subamos a GitHub, se realizar\u00e1n tambi\u00e9n sobre la aplicaci\u00f3n desplegada en Netlify. Para comprobarlo, vamos a modificar el archivo ubicado en '/ruta_aplicacion/public/robots.txt'. Primero, comprobamos su contenido directamente desde el navegador: Modifico el contenido en local: Y ejecuto los siguientes comandos de git para subir los cambios a GitHub: git add . git commit -m \"Modificaci\u00f3n rob\u00f3tica\" git push Si recargamos el navegador, podremos ver el recurso con el contenido actualizado: Es decir que al desplegar la aplicaci\u00f3n mediante la vinculaci\u00f3n de GitHub con una Despliegue con Vercel Para realizar el despliegue con Vercel, creamos una cuenta tambi\u00e9n con nuestro correo electr\u00f3nico (realizaremos el \"enlace con GitHub m\u00e1s adelante). Una vez en la p\u00e1gina principal de Vercel, se nos presentan varias opciones de proveedores git y escogemos GitHub. Al igual que con Netlify, se nos abre una nueva ventana de GitHub que nos pide autorizar a Vercel a consultar datos y a realizar acciones sobre GitHub en nombre nuestro: Se cerrar\u00e1 la ventana y ahora la p\u00e1gina de Vercel habr\u00e1 cambiado, mostrando la opci\u00f3n para importar un repositorio de GitHub al que instalar la aplicaci\u00f3n de Vercel: Clicamos en \"Install\" y se volver\u00e1 a abrir otra ventana de GitHub, donde tendremos un men\u00fa con la lista de nuestras organizaciones, encabezada por nuestro usuario de GitHub, id\u00e9ntica a la que se mostraba en Netlify: Selecciono mi usuario y de nuevo, podemos instalar la aplicaci\u00f3n de Vercel en todos los repositorios o s\u00f3lo en uno. Seleccionamos el repositorio 'practica3-4': Se cierra la ventana y ahora en Vercel nos aparecer\u00e1 el repositorio para importarlo: Clicamos en \"Import\" y se nos dirige a la p\u00e1gina de despliegue: Vercel tardar\u00e1 unos momentos en realizar el despliegue y cuando termine nos lo notificar\u00e1 con un mensaje de celebraci\u00f3n: Y podremos acceder a la aplicaci\u00f3n desplegada: Volvemos a modificar localmente el archivo '/public/robots.txt': Subimos los cambios al repositorio remoto y recargamos la aplicaci\u00f3n desplegada en Vercel:","title":"Pr\u00e1ctica 3.2 - Despliegue con Node Express y con Netlify"},{"location":"#practica-32-despliegue-con-node-express-y-con-netlify","text":"","title":"Pr\u00e1ctica 3.2 - Despliegue con Node Express y con Netlify"},{"location":"#despliegue-con-node-express","text":"En primer lugar debemos asegurarnos de que Tomcat no est\u00e1 ejecut\u00e1ndose: sudo systemctl status tomcat9 # Comprobar el estado de Tomcat sudo systemctl stop tomcat9 # Parar Tomcat A continuaci\u00f3n instalamos Node.js y el gestor de paquetes npm: sudo apt install nodejs npm Para realizar el despliegue, clonamos un repositorio de GitHub que contenga una aplicaci\u00f3n Node. Nos colocamos dentro del directorio del proyecto e instalamos los paquetes requeridos ejecutando: npm install Tambi\u00e9n es importante comprobar en el c\u00f3digo fuente de la aplicaci\u00f3n el puerto que utilizar\u00e1 para comunicarse. En mi caso es el puerto 3000, por lo que ejecuto: sudo ufw allow 3000/tcp Si tratamos de desplegar la aplicaci\u00f3n, aparecer\u00e1 el mensaje de error \"nodemon: not found\". Para solventar este problema, agregamos dicho paquete al archivo package.json ejecutando: npm install nodemon --save-dev Y ahora podremos desplegar la aplicaci\u00f3n correctamente con: npm run start Y podremos acceder a ella desde el navegador de nuestra m\u00e1quina anfitriona indicando la IP de nuestra m\u00e1quina virtual y el puerto en el que se aloja la aplicaci\u00f3n (en mi caso, el 3000):","title":"Despliegue con Node Express"},{"location":"#cuestiones-sobre-node-express","text":"\u00bfD\u00f3nde podemos ver qu\u00e9 script se est\u00e1 ejecutando (al realizar 'npm run start')? Al realizar 'npm run start' sobre el directorio ra\u00edz de nuestra aplicaci\u00f3n estamos ejecutando un script que viene especificado en el archivo 'package.json'. Concretamente, dentro de este archivo existir\u00e1 un bloque 'scripts' que indica qu\u00e9 debe ejecutarse al realizar el comando 'npm run start'. En este ejemplo: \u00bfQu\u00e9 comando se est\u00e1 ejecutando? En este caso, el bloque 'scripts' del 'package.json' indica que debe ejecutarse el comando 'nodemon src/index.js' cuando tratemos de realizar 'npm run start'.","title":"Cuestiones sobre Node Express"},{"location":"#despliegue-con-netlify","text":"En primer lugar, preparamos una aplicaci\u00f3n simple consistente de dos archivos HTML y un JS e inicializamos el proyecto con: npm init Y podemos comprobar en local que funciona correctamente con: node aplicacion.js Y accediendo desde el navegador a la IP y puerto de la aplicaci\u00f3n (debemos asegurarnos de que Tomcat u otras aplicaciones no est\u00e1n utilizando ya ese puerto): Alternativamente, tambi\u00e9n podemos comprobarlo con curl: curl 192.168.0.20:8080 Para poder desplegar sin problemas la aplicaci\u00f3n, debemos modificar el archivo 'package.json'. En concreto, hay que modificar el bloque 'scripts' dentro de este archivo para que quede de la siguiente manera: \"scripts\": { \"start\":\"node aplicacion.js\" } Teniendo en cuenta todas estas cuestiones, borramos esta aplicaci\u00f3n simple y clonamos un repositorio de GitHub que contiene una aplicaci\u00f3n de ejemplo que s\u00ed desplegaremos con Netlify. Utilizaremos dos m\u00e9todos para desplegar aplicaciones con Netlify: el despliegue manual desde el CLI (Command Line Interface) y el despliegue desde el c\u00f3digo publicado en GitHub. Antes de empezar con el despliegue, es necesario registrarse en Netlify. En mi caso, me registro con mi cuenta de correo, para que no se enlace mi cuenta de GitHub directamente. Netlify env\u00eda un email de confirmaci\u00f3n, que nos reenv\u00eda a su p\u00e1gina donde debemos responder a una serie de preguntas sobre nosotros (nombre, si pertenecemos a alguna instituci\u00f3n o empresa, etc) donde lo \u00fanico relevante es que he saltado el paso de enlace con GitHub, que realizar\u00e9 m\u00e1s adelante. A continuaci\u00f3n, pasamos a los procesos del despliegue en s\u00ed.","title":"Despliegue con Netlify"},{"location":"#despliegue-mediante-interfaz-de-linea-de-comandos","text":"En primer lugar, ser\u00e1 necesario generar un token de acceso personal para que podamos establecer una conexi\u00f3n segura con Netlify. Para ello, desde la p\u00e1gina web, accedemos a las 'users settings' y clicamos en 'Applications'. Desde ah\u00ed podremos seleccionar 'New access token' y se generar\u00e1 un nuevo token, que es una cadena de texto que debemos copiar y guardar. Volviendo al terminal (conectado por SSH a nuestro servidor), debemos definir una variable de entorno que contenga el token generado por Netlify: export NETLIFY_AUTH_TOKEN={token_generado_por_netlify} Ahora ya podemos instalar el CLI de Netlify: sudo npm install netlify-cli -g Y si tratamos de ejecutar 'netlify login', nos dir\u00e1 que ya estamos loggeados porque ya se ha comprobado el contenido de la variable de entorno 'NETLIFY_AUTH_TOKEN'. Este es el momento de instalar las dependencias de la aplicaci\u00f3n, buildearla y desplegarla. Nos colocamos dentro del directorio de la aplicaci\u00f3n y ejecutamos: sudo npm install sudo npm run build netlify deploy Le indicamos que queremos crear un nuevo sitio y respondemos las preguntas que nos netlify nos plantea. En mi caso: Esa es la fase de \"pre-deploy\". Para llevar la aplicaci\u00f3n al despliegue definitivo, ejecutamos: netlify deploy --prod Y le indicamos el directorio con el contenido a desplegar. En mi caso, './build' desde el directorio de la aplicaci\u00f3n. Para comprobar que el despliegue ha resultado exitoso, accedo a la URL que indica Netlify:","title":"Despliegue mediante Interfaz de L\u00ednea de Comandos"},{"location":"#despliegue-mediante-conexion-con-github","text":"Para realizar el despliegue mediante una conexi\u00f3n entre Netlify y GitHub, en primer lugar, eliminamos desde la p\u00e1gina de Netlify la p\u00e1gina desplegada anteriormente (accedemos a la configuraci\u00f3n del site y bajamos hasta encontrar la opci\u00f3n 'delete site') y en nuestra MV, eliminamos el directorio con el contenido de la aplicaci\u00f3n. Para simular un proyecto que hemos desarrollado desde cero y del que, en principio, s\u00f3lo disponemos el c\u00f3digo fuente en local, descargaremos el c\u00f3digo fuente de la misma aplicaci\u00f3n que usamos en el despliegue anterior en un archivo zip desde GitHub, crearemos un repositorio vac\u00edo y subiremos el c\u00f3digo fuente de la aplicaci\u00f3n. Para ello, ejecutamos: # Comandos para bajar el c\u00f3digo fuente: mkdir practica3-4 # Creamos directorio para almacenar el c\u00f3digo. wget https://github.com/StackAbuse/color-shades-generator/archive/refs/heads/main.zip # Descargamos el c\u00f3digo fuente de la aplicaci\u00f3n. unzip main.zip -d practica3-4 # Descomprimimos el archivo con el c\u00f3digo fuente en el directorio creado anteriormente. cd practica3-4/color-shades-generator-main/ # Nos colocamos en el directorio que contiene el c\u00f3digo fuente. En este momento es conveniente tener creado el repositorio vac\u00edo en GitHub. Para ello, accedemos a la p\u00e1gina y buscamos el bot\u00f3n de \"Nuevo repositorio\". En mi caso, mi repositorio remoto se llama 'practica3-4'. Adem\u00e1s, es conveniente que creemos un par de claves p\u00fablica-privada mediante SSH para comunicar nuestra MV con GitHub. Para ello: ssh-keygen -t ed25519 -C \"a23pebeal@iesgrancapitan.org\" # Donde -t es una bandera que especif\u00edca el algoritmo utilizado para generar las claves. # Donde -C es un comentario que a\u00f1adimos a la clave, yo he utilizado el correo electr\u00f3nico que tengo asociado a mi cuenta de Github, como indica su gu\u00eda para generar claves SSH. A continuaci\u00f3n, el comando nos presenta unas preguntas que dejaremos en blanco, de manera que las claves se almacenar\u00e1n en el directorio por defecto '~/.ssh/' y no ser\u00e1 necesario indicar ninguna frase de seguridad para acceder a las claves. Por \u00faltimo, a\u00f1adimos la clave privada generada al manejador de claves: ssh-add ~/.ssh/id_ed25519 Moment\u00e1neamente dejamos el terminal, accedemos a nuestra cuenta de GitHub desde el navegador, nos dirigimos a 'Settings/SSH and GPG keys/' y pulsamos 'Nueva clave SSH'. Debemos copiar y pegar el contenido de '~/.ssh/id_ed25519.pub' (que es nuestra clave p\u00fablica) y subirlo dos veces, una como 'Authentication key' y otra como 'Signing key'. Una vez creado el repositorio y configuradas las claves SSH, volvemos al terminal (que, recordamos, est\u00e1 conectado por SSH a la MV) y ejecutamos los siguientes comandos para inicializar el repositorio local y relacionarlo con el repositorio remoto: # Comandos de git para crear el nuevo repositorio: git init # Inicializamos el repositorio git branch -M main # Indicamos que la rama principal ser\u00e1 \"main\" git remote add origin {direcci\u00f3n SSH del repositorio remoto} # Indicamos la direcci\u00f3n SSH del repositorio remoto al que subiremos el c\u00f3digo fuente de la aplicaci\u00f3n. git add . # A\u00f1adimos el c\u00f3digo fuente al 'stage' de git. git commit -m \"Subida del c\u00f3digo fuente.\" # 'Comprometemos' los archivos en el \u00e1rea de 'stage' y le a\u00f1adimos un comentario descriptivo. git push --set-upstream origin main # Subimos el c\u00f3digo al repositorio remoto, creando en \u00e9l la rama 'main', que existe en local pero no a\u00fan en remoto. Este es el aspecto que tendr\u00e1 ahora nuestro repositorio remoto en GitHub: Con el c\u00f3digo subido al repositorio remoto, ya s\u00f3lo queda enlazar nuestra cuenta de GitHub con Netlify. Para ello, volvemos al navegador y entramos a Netlify y seleccionamos \"Import from Git\" e indicamos GitHub como nuestro proveedor. Nos saltar\u00e1 una ventana emergente de GitHub pregunt\u00e1ndonos si queremos ceder a Netlify permisos para consultar informaci\u00f3n de nuestra cuenta y realizar determinadas acciones: Confirmamos la autorizaci\u00f3n y se nos llevar\u00e1 a otra p\u00e1gina (en la misma ventana) pregunt\u00e1ndonos esta vez d\u00f3nde queremos \"instalar Netlify\". Se nos presentar\u00e1 una lista de las organizaciones que tenemos asociadas en GitHub, encabezada por nuestro usuario: Seleccionamos nuestro usuario y se nos presentar\u00e1 la opci\u00f3n de instalar Netlify en todos nuestros repositorios o en s\u00f3lo una selecci\u00f3n de estos. En este caso, indicaremos s\u00f3lo el repositorio 'practica3-4' y procedemos a la instalaci\u00f3n de Netlify: Ahora se cerrar\u00e1 la ventana emergente y volvemos a la ventana original de Netlify en la que est\u00e1bamos originalmente realizando el enlace a GitHub. Podemos ver que ahora nos aparece el repositorio que hemos seleccionado para que se instale Netlify: Lo seleccionamos y llegaremos a la p\u00e1gina de deploy, que nos ofrece una serie de opciones para el despliegue. En principio, s\u00f3lo es necesario indicar el nombre del 'site' (es conveniente comprobar la disponibilidad antes de intentar desplegarlo) y podemos dejar el resto de opciones que aparecen predeterminadas: Netlify tardar\u00e1 un poco en realizar el despliegue. Cuando haya terminado, saltar\u00e1 un mensaje de la p\u00e1gina notific\u00e1ndonos que ha finalizado y podremos acceder a la aplicaci\u00f3n desplegada: Ahora, todos los cambios que realicemos sobre el c\u00f3digo y que subamos a GitHub, se realizar\u00e1n tambi\u00e9n sobre la aplicaci\u00f3n desplegada en Netlify. Para comprobarlo, vamos a modificar el archivo ubicado en '/ruta_aplicacion/public/robots.txt'. Primero, comprobamos su contenido directamente desde el navegador: Modifico el contenido en local: Y ejecuto los siguientes comandos de git para subir los cambios a GitHub: git add . git commit -m \"Modificaci\u00f3n rob\u00f3tica\" git push Si recargamos el navegador, podremos ver el recurso con el contenido actualizado: Es decir que al desplegar la aplicaci\u00f3n mediante la vinculaci\u00f3n de GitHub con una","title":"Despliegue mediante conexi\u00f3n con GitHub"},{"location":"#despliegue-con-vercel","text":"Para realizar el despliegue con Vercel, creamos una cuenta tambi\u00e9n con nuestro correo electr\u00f3nico (realizaremos el \"enlace con GitHub m\u00e1s adelante). Una vez en la p\u00e1gina principal de Vercel, se nos presentan varias opciones de proveedores git y escogemos GitHub. Al igual que con Netlify, se nos abre una nueva ventana de GitHub que nos pide autorizar a Vercel a consultar datos y a realizar acciones sobre GitHub en nombre nuestro: Se cerrar\u00e1 la ventana y ahora la p\u00e1gina de Vercel habr\u00e1 cambiado, mostrando la opci\u00f3n para importar un repositorio de GitHub al que instalar la aplicaci\u00f3n de Vercel: Clicamos en \"Install\" y se volver\u00e1 a abrir otra ventana de GitHub, donde tendremos un men\u00fa con la lista de nuestras organizaciones, encabezada por nuestro usuario de GitHub, id\u00e9ntica a la que se mostraba en Netlify: Selecciono mi usuario y de nuevo, podemos instalar la aplicaci\u00f3n de Vercel en todos los repositorios o s\u00f3lo en uno. Seleccionamos el repositorio 'practica3-4': Se cierra la ventana y ahora en Vercel nos aparecer\u00e1 el repositorio para importarlo: Clicamos en \"Import\" y se nos dirige a la p\u00e1gina de despliegue: Vercel tardar\u00e1 unos momentos en realizar el despliegue y cuando termine nos lo notificar\u00e1 con un mensaje de celebraci\u00f3n: Y podremos acceder a la aplicaci\u00f3n desplegada: Volvemos a modificar localmente el archivo '/public/robots.txt': Subimos los cambios al repositorio remoto y recargamos la aplicaci\u00f3n desplegada en Vercel:","title":"Despliegue con Vercel"}]}